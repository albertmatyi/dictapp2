{"version":3,"file":"/packages/panels.js","sources":["panels/panels.html","panels/panels.js"],"names":[],"mappings":";;;;;;;;;AACA,kC;AACA,wE;AACA,kB;AACA,gC;AACA,iD;AACA,iB;AACA,sF;AACA,K;AACA,I;;AAEA,iC;AACA,sE;AACA,kB;AACA,mB;AACA,yB;AACA,wI;AACA,K;AACA,4E;AACA,wB;AACA,4C;AACA,gD;AACA,iB;AACA,yC;AACA,uB;AACA,oD;AACA,sD;AACA,sC;AACA,e;AACA,sB;AACA,4C;AACA,4B;AACA,qE;AACA,kC;AACA,mB;AACA,2D;AACA,sD;AACA,iB;AACA,6D;AACA,gE;AACA,iD;AACA,iB;AACA,yC;AACA,uB;AACA,oD;AACA,uD;AACA,8C;AACA,+B;AACA,I;;AAEA,wC;AACA,oF;AACA,kB;AACA,sD;AACA,I;;;;;;;;;;;;;;;;;;;ACtDA,kD;AACA,gB;;AAEA,sB;AACA,wD;AACA,kD;AACA,2B;AACA,oC;AACA,M;AACA,0E;AACA,oB;AACA,wB;AACA,E;AACA,0C;AACA,4C;AACA,uB;AACA,qC;AACA,K;AACA,E;AACA,4B;AACA,yB;AACA,qC;AACA,wB;AACA,8B;AACA,a;AACA,W;AACA,K;AACA,G;AACA,c;AACA,mB;AACA,0B;AACA,oB;AACA,yB;AACA,S;AACA,gB;AACA,iC;AACA,+C;AACA,kG;AACA,U;AACA,mC;AACA,2C;AACA,mC;AACA,S;AACA,O;AACA,K;;AAEA,uC;AACA,oD;AACA,mB;AACA,E;;AAEA,2B;AACA,4B;AACA,6D;AACA,kC;AACA,sC;AACA,M;AACA,0B;AACA,kD;AACA,+D;AACA,M;AACA,8B;AACA,oC;AACA,yB;AACA,+B;AACA,kC;AACA,K;AACA,G;;AAEA,8B;AACA,oB;AACA,gC;AACA,sC;AACA,e;AACA,2B;AACA,S;AACA,O;AACA,4B;AACA,wB;AACA,yC;AACA,gC;AACA,Y;AACA,E;;AAEA,0B;AACA,kC;AACA,2B;AACA,8B;AACA,M;AACA,oC;AACA,sC;AACA,+B;AACA,kC;AACA,S;AACA,K;AACA,G;;AAEA,4B;AACA,oC;AACA,yB;AACA,qB;AACA,yB;AACA,oC;AACA,8B;AACA,qD;AACA,M;AACA,6B;AACA,oC;AACA,mB;AACA,gC;AACA,a;AACA,W;AACA,M;AACA,E","sourcesContent":["\nTemplate.__checkName(\"appPanels\");\nTemplate[\"appPanels\"] = new Template(\"Template.appPanels\", (function() {\n  var view = this;\n  return Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"panels\"));\n  }, function() {\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"appPanel\")), \"\\n    \" ];\n  });\n}));\n\nTemplate.__checkName(\"appPanel\");\nTemplate[\"appPanel\"] = new Template(\"Template.appPanel\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": function() {\n      return [ \"app-panel-wrapper \", Spacebars.mustache(view.lookup(\"offScreen\")), \" \", Spacebars.mustache(view.lookup(\"panelClass\")) ];\n    }\n  }, HTML.Raw('\\n        <div class=\"overlay\"></div>\\n        '), HTML.DIV({\n    \"class\": \"app-panel\"\n  }, \"\\n            \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"title\"));\n  }, function() {\n    return [ \"\\n            \", HTML.DIV({\n      \"class\": \"header\"\n    }, \"\\n                \", Blaze.View(function() {\n      return Spacebars.mustache(view.lookup(\"title\"));\n    }), \"\\n                \", HTML.A({\n      href: \"\",\n      \"class\": \"close\"\n    }, \"\\n                    \", HTML.SPAN({\n      \"class\": \"fa fa-times\"\n    }), \"\\n                \"), \"\\n            \"), \"\\n            \" ];\n  }), \"\\n            \", HTML.DIV({\n    \"class\": \"body\"\n  }, \"\\n                \", Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"contentData\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"content\"));\n  }), \"\\n            \"), \"\\n            \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"footer\"));\n  }, function() {\n    return [ \"\\n            \", HTML.DIV({\n      \"class\": \"footer\"\n    }, \"\\n                \", Blaze.View(function() {\n      return Spacebars.mustache(view.lookup(\"footer\"));\n    }), \"\\n            \"), \"\\n            \" ];\n  }), \"\\n        \"), \"\\n    \");\n}));\n\nTemplate.__checkName(\"appPanelInvalid\");\nTemplate[\"appPanelInvalid\"] = new Template(\"Template.appPanelInvalid\", (function() {\n  var view = this;\n  return \"Wrong or no template defined for the panel\";\n}));\n","var PanelCollection = new Meteor.Collection(null);\nvar Panels = {};\n\nvar defaultOptions = {\n    template: null, // the child template to be rendered\n    data: {}, // the child template to be rendered\n    callback: function () {\n        console.log('closed panel');\n    },\n    offScreen: true, // marking if panel should be offScreen of the screen\n    _type: 'panels',\n    container: undefined\n};\nTemplate.appPanel.rendered = function () {\n    var $cont = $(this.data.data.container);\n    if ($cont.length) {\n        $cont.append(this.firstNode);\n    }\n};\nTemplate.appPanels.helpers({\n    panels: function () {\n        return PanelCollection.find({\n            container: {\n                $exists: false\n            }\n        });\n    }\n});\n(function () {\n    var views = {};\n    PanelCollection.find({\n        container: {\n            $exists: true\n        }\n    }).observe({\n        added: function (panel) {\n            var parent = $(panel.container)[0];\n            views[panel._id] = Blaze.renderWithData(Template.appPanel, Panels[panel._id], parent);\n        },\n        removed: function (panel) {\n            Blaze.remove(views[panel._id]);\n            delete views[panel._id]\n        }\n    });\n})();\n\nvar setupOptions = function (options) {\n    options = $.extend({}, defaultOptions, options);\n    return options;\n};\n\nTemplate.appPanel.helpers({\n    offScreen: function () {\n        var oc = PanelCollection.findOne(this._id).offScreen;\n        console.log('recalc', oc);\n        return oc ? 'off-screen' : '';\n    },\n    content: function () {\n        var opts = Panels[this.parentContext._id];\n        return opts ? opts.template : Template.appPanelInvalid;\n    },\n    contentData: function () {\n        var opts = Panels[this._id];\n        return _.extend({\n            parentContext: this\n        }, opts ? opts.data : {});\n    }\n});\n\nvar closePanel = function () {\n    var self = this;\n    var opts = Panels[self._id];\n    PanelCollection.update(self._id, {\n        $set: {\n            offScreen: true\n        }\n    });\n    setTimeout(function () {\n        opts.callback();\n        PanelCollection.remove(self._id);\n        delete Panels[self._id];\n    }, 150);\n};\n\nTemplate.appPanel.events({\n    'click .close': function (e) {\n        e.preventDefault();\n        closePanel.call(this);\n    },\n    'click .overlay': function (e) {\n        if (!e.isDefaultPrevented()) {\n            e.preventDefault();\n            closePanel.call(this);\n        }\n    }\n});\n\nPanel = function (options) {\n    options = setupOptions(options);\n    var id = Random.id();\n    options._id = id;\n    Panels[id] = options;\n    PanelCollection.insert(options);\n    this.close = function () {\n        closePanel.call(PanelCollection.findOne(id));\n    };\n    this.show = function () {\n        PanelCollection.update(id, {\n            $set: {\n                offScreen: false\n            }\n        });\n    };\n};\n"]}