{"version":3,"file":"/packages/milight.js","sources":["milight/highlight.js","milight/helpers.js"],"names":[],"mappings":";;;;;;;;AAAA,E;AACA,0B;AACA,E;AACA,0C;AACA,+G;AACA,E;AACA,mE;AACA,0B;AACA,kF;AACA,2E;AACA,uE;AACA,E;AACA,S;AACA,wD;AACA,uD;AACA,sC;AACA,E;AACA,mD;AACA,mD;AACA,iD;AACA,4C;AACA,E;AACA,2C;AACA,2D;AACA,E;AACA,uD;AACA,+D;AACA,E;AACA,wD;AACA,mC;AACA,iF;AACA,E;AACA,gC;AACA,iC;AACA,E;AACA,+B;AACA,0E;AACA,E;AACA,E;AACA,mC;AACA,E;AACA,8B;AACA,E;AACA,G;;AAEA,e;AACA,6D;AACA,kC;AACA,4C;AACA,wB;AACA,yB;AACA,kC;AACA,iB;AACA,2E;AACA,+D;AACA,2D;AACA,oD;AACA,yD;AACA,iD;AACA,sE;AACA,qD;AACA,a;AACA,uG;AACA,yF;AACA,4H;AACA,8D;AACA,uF;AACA,a;AACA,S;AACA,iB;AACA,K;AACA,G;;AAEA,4C;AACA,+D;AACA,qC;;AAEA,oF;AACA,qC;AACA,mD;AACA,2B;AACA,a;AACA,E;;AAEA,iD;AACA,uG;AACA,qC;AACA,I;AACA,uC;AACA,wB;AACA,K;AACA,iD;AACA,wB;AACA,O;AACA,iD;AACA,8D;AACA,O;AACA,4C;;AAEA,iD;AACA,8C;AACA,6B;AACA,0C;AACA,K;AACA,uC;AACA,I;AACA,kC;AACA,yE;AACA,O;AACA,E;;;;;;;;;;;;;;;;;;;;AC5GA,yG;;AAEA,8C;AACA,2C;AACA,sB;AACA,uB;;AAEA,gC;AACA,6B;AACA,wB;AACA,mD;AACA,2B;AACA,sB;AACA,yD;AACA,iC;;AAEA,8B;AACA,W;AACA,Q;AACA,2B;AACA,wB;AACA,4B;AACA,yE;AACA,qF;AACA,+B;AACA,gC;AACA,U;AACA,Q;AACA,8B;AACA,8B;AACA,Q;AACA,O;AACA,K;AACA,C","sourcesContent":["/*\n * jQuery Highlight plugin\n *\n * Based on highlight v3 by Johann Burkard\n * http://johannburkard.de/blog/programming/javascript/highlight-javascript-text-higlighting-jquery-plugin.html\n *\n * Code a little bit refactored and cleaned (in my humble opinion).\n * Most important changes:\n *  - has an option to highlight only entire words (wordsOnly - false by default),\n *  - has an option to be case sensitive (caseSensitive - false by default)\n *  - highlight element tag and class names can be specified in options\n *\n * Usage:\n *   // wrap every occurrance of text 'lorem' in content\n *   // with <span class='highlight'> (default options)\n *   $('#content').highlight('lorem');\n *\n *   // search for and highlight more terms at once\n *   // so you can save some time on traversing DOM\n *   $('#content').highlight(['lorem', 'ipsum']);\n *   $('#content').highlight('lorem ipsum');\n *\n *   // search only for entire word 'lorem'\n *   $('#content').highlight('lorem', { wordsOnly: true });\n *\n *   // don't ignore case during search of term 'lorem'\n *   $('#content').highlight('lorem', { caseSensitive: true });\n *\n *   // wrap every occurrance of term 'ipsum' in content\n *   // with <em class='important'>\n *   $('#content').highlight('ipsum', { element: 'em', className: 'important' });\n *\n *   // remove default highlight\n *   $('#content').unhighlight();\n *\n *   // remove custom highlight\n *   $('#content').unhighlight({ element: 'em', className: 'important' });\n *\n *\n * Copyright (c) 2009 Bartek Szopka\n *\n * Licensed under MIT license.\n *\n */\n\njQuery.extend({\n    highlight: function (node, re, nodeName, className, cb) {\n        if (node.nodeType === 3) {\n            var match = node.data.match(re);\n            if (match) {\n                if (cb) {\n                    cb.call(node);\n                }\n                var highlight = document.createElement(nodeName || 'span');\n                highlight.className = className || 'highlight';\n                var wordNode = node.splitText(match.index);\n                wordNode.splitText(match[0].length);\n                var wordClone = wordNode.cloneNode(true);\n                highlight.appendChild(wordClone);\n                wordNode.parentNode.replaceChild(highlight, wordNode);\n                return 1; //skip added node in parent\n            }\n        } else if ((node.nodeType === 1 && node.childNodes) && // only element nodes that have children\n                !/(script|style)/i.test(node.tagName) && // ignore script and style nodes\n                !(node.tagName === nodeName.toUpperCase() && node.className === className)) { // skip if already highlighted\n            for (var i = 0; i < node.childNodes.length; i++) {\n                i += jQuery.highlight(node.childNodes[i], re, nodeName, className, cb);\n            }\n        }\n        return 0;\n    }\n});\n\njQuery.fn.unhighlight = function (options) {\n    var settings = { className: 'highlight', element: 'span' };\n    jQuery.extend(settings, options);\n\n    return this.find(settings.element + \".\" + settings.className).each(function () {\n        var parent = this.parentNode;\n        parent.replaceChild(this.firstChild, this);\n        parent.normalize();\n    }).end();\n};\n\njQuery.fn.highlight = function (words, options) {\n    var settings = { className: 'highlight', element: 'span', caseSensitive: false, wordsOnly: false };\n    jQuery.extend(settings, options);\n    \n    if (words.constructor === String) {\n        words = [words];\n    }\n    words = jQuery.grep(words, function(word, i){\n      return word != '';\n    });\n    words = jQuery.map(words, function(word, i) {\n      return word.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n    });\n    if (words.length == 0) { return this; };\n\n    var flag = settings.caseSensitive ? \"\" : \"i\";\n    var pattern = \"(\" + words.join(\"|\") + \")\";\n    if (settings.wordsOnly) {\n        pattern = \"\\\\b\" + pattern + \"\\\\b\";\n    }\n    var re = new RegExp(pattern, flag);\n    \n    return this.each(function () {\n        jQuery.highlight(this, re, settings.element, settings.className);\n    });\n};\n","\nif (typeof Handlebars !== 'undefined' && typeof UI !== 'undefined' && typeof Spacebars !== 'undefined') {\n\n  UI.registerHelper('highlight', function () {\n    var dependency = new Deps.Dependency(),\n        keywords = '',\n        options = this;\n\n    return UI.Component.extend({\n      parented: function () {\n        var self = this;\n        self.highlight = Deps.autorun(function () {\n          $(self.firstNode)\n            .nextAll()\n            .unhighlight() // TODO: do we need this part?\n            .highlight(keywords);\n\n          dependency.depend();\n        });\n      },\n      render: function () {\n        var self = this;\n        return function () {\n          UI.toRawText(self.__content, self); // this triggers reactivity\n          keywords = Spacebars.call(self.lookup('keywords'), options.keywords) || '';\n          dependency.changed();\n          return self.__content;\n        };\n      },\n      destroyed: function () {\n        this.highlight.stop();\n      },\n    });\n  });\n}\n"]}